function [J grad] = loss(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%loss Implements the neural network loss function for a two layer
%neural network which performs classification
%   [J grad] = loss(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the loss and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup 
m = size(X, 1);
         
% need to return the following variables after computation 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
    
    %fp
    
    X=[ones(m,1) X];
    z2=(Theta1*X')';
    a2=sigmoid(z2);
    a2=[ones(m,1) a2];
    z3=(Theta2*a2')';
    a3=sigmoid(z3);
   
   
    %compution of cost function
    
    for i=1:m
        cost=0;
        
        for k=1:num_labels
            cost=cost+log(1-a3(i,k));
        end
        
        J=J-(1/m)*(cost+log( a3(i,y(i)) / (1-a3(i,y(i))) ) );
    end
    
    % adding regularisation terms
    
    for j=2:(input_layer_size+1)
        J=J+lambda*Theta1(:,j)'*Theta1(:,j)/(2*m);
    end
    
    for k=2:(hidden_layer_size+1)
       J=J+lambda*Theta2(:,k)'*Theta2(:,k)/(2*m);
    end
    
    %reshaping y to binary matrix
    temp=y;
    y=zeros(m,num_labels);
    %cmon now
    
    %bp and reshaping continued
    deltamain2=zeros(num_labels,hidden_layer_size+1);
    
    deltamain1=zeros(hidden_layer_size,input_layer_size+1);
    
    z2=[ones(m,1) z2];
    for t=1:m
        y(t,temp(t))=1;
        
        delta3= a3(t,:)'-y(t,:)';
        delta2= (Theta2')*delta3.*sigmoidGradient(z2(t,:)');
        
        deltamain2=deltamain2+delta3*a2(t,:);
        delta2=delta2(2:end);
        deltamain1=deltamain1+delta2*X(t,:);
    end
       Theta1_grad=deltamain1/m;
       Theta2_grad=deltamain2/m;
       
       
       Theta1_grad(:,2:end) = Theta1_grad(:,2:end) + lambda*Theta1(:,2:end)/m;
       Theta2_grad(:,2:end) = Theta2_grad(:,2:end) + lambda*Theta2(:,2:end)/m;
       
      
   








% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end


